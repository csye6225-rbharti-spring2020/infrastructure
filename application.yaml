AWSTemplateFormatVersion: "2010-09-09"

Description: This template deploys a VPC, 3 Public subnets, each in a different availability zone in the same region in the same VPC.
             Also provides Internet gateway resource and route table for all the subnets created.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: myStack

  VpcCIDR:
    Description: IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.25.0.0/16

  PublicSubnet1CIDR:
    Description: IP range (CIDR notation) for the first public subnet in the first Availability Zone
    Type: String
    Default: 10.25.10.0/24

  PublicSubnet2CIDR:
    Description: IP range (CIDR notation) for the second public subnet in the second Availability Zone
    Type: String
    Default: 10.25.11.0/24

  PublicSubnet3CIDR:
    Description: IP range (CIDR notation) for the third public subnet in the third Availability Zone
    Type: String
    Default: 10.25.12.0/24

  vpcRegion:
    Description: Region for the infrastructure, used for selecting Availability zones
    Type: String
    Default: us-east-1

  InstanceTypeParameter: 
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - m1.small
      - m1.large
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to SSH into the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: ec2
    ConstraintDescription: Must provide an existing EC2 KeyPair.
  
  Ec2InstanceSize:
    Description: Size of the EC2 Instance Size
    Type: Number
    Default: '20'

  Ec2InstanceName:
    Description: Name of the EC2 instance
    Type: String
    Default: 'myEC2Instance'

  Ec2InstanceIAMRole:
    Description: Name of the EC2 instance IAM role already existing
    Type: String
    Default: 'EC2-CSYE6225'

  DBEngine:
    Description: Name of the DBEgine
    Type: String
    Default: 'MySQL'

  DBInstanceClass:
    Default: 'db.t3.micro'
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.

  DBInstanceID:
    Default: 'csye6225-spring2020'
    Description: My database instance
    Type: String
    MinLength: '1'
    MaxLength: '63'

  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

  DBAllocatedStorage:
    Default: '50'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 20 and 65536 GiB.

  DBName:
    Default: 'csye6225'
    Description: My database
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters. 

  MultiAZ:
    Description: Specifies if the database instance is a multiple Availability Zone deployment.
    Type: String
    AllowedValues: [true, false]
    Default: true
    ConstraintDescription: "Value must be boolean value." 

  DBPublicAccessibility:
    Description: Specifies if the DB instance is publically available.
    Type: String
    AllowedValues: [true, false]
    Default: false
    ConstraintDescription: "Value must be boolean value." 

  Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-0e45550c321406f56
    us-east-2:
      AMIID: ami-c55673a0

Resources:
  #Creates the VPC, Enables DNS, uses VpcCIDR parameter defined in Parameters
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:
            Ref: ${EnvironmentName} VPC

  #Creates the S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToStandardIAAfter30Days
            Status: 'Enabled'
            Transition:
              TransitionInDays: 30
              StorageClass: 'STANDARD_IA'

  #Creates the EC2 instance and sets its configuration 
  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: DBinstance                     
    Properties:
      ImageId:
        #Uses the Region to use the already created AMI image
        !FindInMap                                 
          - AWSRegionToAMI                         
          - !Ref AWS::Region
          - AMIID
      InstanceType:
        Ref: InstanceTypeParameter
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref Ec2InstanceSize
            VolumeType: gp2
            DeleteOnTermination: true
      SecurityGroups: [!Ref InstanceSecurityGroup]
      IamInstanceProfile: !Ref Ec2InstanceIAMRole
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash 
            - |
              set -e -x 
            - |
              sudo echo DBCreationType=update >> /etc/profile.d/envvariable.sh 
            - |
              sudo echo export DBCreationType >> /etc/profile.d/envvariable.sh 
            - !Sub |
              sudo echo username=${DBUsername} >> /etc/profile.d/envvariable.sh 
            - |
              sudo echo export username >> /etc/profile.d/envvariable.sh 
            - !Sub >
              sudo echo password=${DBPassword} >>
              /etc/profile.d/envvariable.sh 
            - |
              sudo echo export password >> /etc/profile.d/envvariable.sh 
            - !Join 
              - ''
              - - 'echo awsRDS=jdbc:mysql://'
                - !GetAtt 
                  - DBinstance
                  - Endpoint.Address
                - !Sub |
                  :3306/${dbName} >> /etc/profile.d/envvariable.sh 
            - !Join 
              - ''
              - - sudo echo bucketName=
                - !Ref S3Bucket
                - |
                  >> /etc/profile.d/envvariable.sh 
            - |
              sudo echo export DBinstance >> /etc/profile.d/envvariable.sh 
            - |
              sudo echo export S3Bucket >> /etc/profile.d/envvariable.sh
      Tags:                                      
        -                                        
          Key: Name
          Value: !Ref Ec2InstanceName   

  #Creates the RDS DB instance and sets its configuration 
  DBinstance: 
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: !Ref DBEngine
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: !Ref MultiAZ
      DBSecurityGroups: [!Ref RDSInstanceSecurityGroup]
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: !Ref DBPublicAccessibility

  #DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for DB
      SubnetIds:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      - Ref: PublicSubnet3
      Tags:
      - Key: Name
        Value:
          Ref: ${EnvironmentName} DBSubnetGroup

  #Creates the EC2 Security Group for the EC2 instance
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: VPC
    GroupName: 'application'
    Properties:
      GroupDescription: Enables TCP traffic on ports 22, 80, 443 and 8080
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
      Tags:                                      
        -                                        
          Key: Name
          Value: application 

  #Creates the EC2 Security Group for the RDS Instance
  RDSInstanceSecurityGroup: 
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: VPC
    Properties:
      GroupDescription: Enables TCP traffic on port 3306 for MySQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
          SourceSecurityGroupId: 
            Fn::GetAtt:
            - InstanceSecurityGroup
      Tags:                                      
        -                                        
          Key: Name
          Value: database

  #Creates the first subnet, Refers the VPC defined above, Sets the ipv4 CIDR block from parameters, Gets the first availability zone in the same region
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref vpcRegion
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  #Creates the second subnet, Refers the VPC defined above, Sets the ipv4 CIDR block from parameters, Gets the second availability zone in the same region
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref vpcRegion
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  #Creates the third subnet, Refers the VPC defined above, Sets the ipv4 CIDR block from parameters, Gets the third availability zone in the same region
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 2
        - Fn::GetAZs: !Ref vpcRegion
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ3)

  #Creates an Internet Gateway for myVpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  #Attaches the Internet Gateway created above to myVpc
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  #Public Route Table for the Vpc
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  #Default Route Entry directing all the traffic to the Internet Gateway created above
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  #Associating Subnet 1 to the Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  #Associating Subnet 2 to the Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  #Associating Subnet 3 to the Route Table
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

#Contains all the values available via this Stack
Outputs:
  #VPC 
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  #An array of all the Public Subnets created
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3 ]]

  #Public Subnet 1
  PublicSubnet1:
    Description: First public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  #Public Subnet 2
  PublicSubnet2:
    Description: Second public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  #Public Subnet 3
  PublicSubnet2:
    Description: Third public subnet in the 3rd Availability Zone
    Value: !Ref PublicSubnet3